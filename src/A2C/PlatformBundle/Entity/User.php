<?php
// src/A2C/PlatformBundle/Entity/User.php

namespace A2C\PlatformBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * User
 *
 * @ORM\Table(name="a2c_user")
 * @ORM\Entity(repositoryClass="A2C\PlatformBundle\Repository\UserRepository")
 */
class User
{
    /**
     * @var int The id of the user, autogenerated.
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string The firstname of the user.
     *
     * @ORM\Column(name="firstName", type="string", length=64)
     * @Assert\NotBlank
     */
    private $firstName;

    /**
     * @var string The lastname of the user.
     *
     * @ORM\Column(name="lastName", type="string", length=64)
     * @Assert\NotBlank
     */
    private $lastName;

    /**
     * @var string The email address of the user.
     *
     * @ORM\Column(name="emailAddress", type="string", length=255)
     * @Assert\NotBlank
     * @Assert\Email
     */
    private $emailAddress;

    /**
     * @var enum Used by $gender variable
     */
    public static $genderType = array("male"=>false, "female"=>true);
    
    /**
     * @var bool false if the user is a male, true if the user is a female.
     * Prefer the use of $genderType enumeration
     *
     * @ORM\Column(name="gender", type="boolean")
     * @Assert\NotBlank
     */
    private $gender;
    
    /**
     * @var date The creation's date of the user.
     *
     * @ORM\Column(name="creationDate", type="date")
     * @Assert\NotBlank
     * @Assert\DateTime()
     */
    private $creationDate;
    
    /**
     * @var bool 1 if the user is banned, 0 otherwise.
     *
     * @ORM\Column(name="isBanned", type="boolean")
     * @Assert\NotBlank
     */
    private $isBanned;

    /**
     * @var Advert[] The adverts created by the user.
     * 
     * @ORM\OneToMany(targetEntity="A2C\PlatformBundle\Entity\Advert", mappedBy="user")
     */
    private $adverts;

    /**
    * @var int The number of adverts created by the user. Limited to 5 by user.
    * @ORM\Column(name="advertsNb", type="smallint")
    * @Assert\NotBlank
    * @Assert\Range(min=0)
    */
    private $advertsNb;
	
    /**
     * Constructor
     */
    public function __construct($firstName = null, $lastName = null, $emailAddress = null, $gender = null)
    {
        $this->firstName = $firstName;
        $this->lastName = $lastName;
        $this->emailAddress = $emailAddress;
        $this->gender = $gender;
        $this->creationDate = new \Datetime();
        $this->adverts = new \Doctrine\Common\Collections\ArrayCollection();
        $this->advertsNb = 0;
        $this->isBanned = false;
    }
    
    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set firstName
     *
     * @param string $firstName
     *
     * @return User
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName
     *
     * @param string $lastName
     *
     * @return User
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set emailAddress
     *
     * @param string $emailAddress
     *
     * @return User
     */
    public function setEmailAddress($emailAddress)
    {
        $this->emailAddress = $emailAddress;

        return $this;
    }

    /**
     * Get emailAddress
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->emailAddress;
    }

    /**
     * Set gender
     *
     * @param boolean $gender
     *
     * @return User
     */
    public function setGender($gender)
    {
        $this->gender = $gender;

        return $this;
    }

    /**
     * Get gender
     *
     * @return bool
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * @return date creation date
     */
    public function getCreationDate()
    {
        return $this->creationDate;
    }

    /*
     * @param date creation date
     */
    public function setCreationDate($creationDate)
    {
        $this->creationDate = $creationDate;
    }
    
    /**
     * Set isBanned
     *
     * @param boolean $isBanned
     *
     * @return User
     */
    public function setIsBanned($isBanned)
    {
        $this->isBanned = $isBanned;

        return $this;
    }

    /**
     * Get isBanned
     *
     * @return bool
     */
    public function getIsBanned()
    {
        return $this->isBanned;
    }
    
    /**
     * Set adverts
     *
     * @param adverts Advert[]
     *
     * @return User
     */
    public function setAdverts($adverts)
    {
        $this->adverts = $adverts;

        return $this;
    }

    /**
     * Set advertsNb
     *
     * @param integer $advertsNb
     *
     * @return User
     */
    public function setAdvertsNb($advertsNb)
    {
        $this->advertsNb = $advertsNb;

        return $this;
    }

    /**
     * Get advertsNb
     *
     * @return integer
     */
    public function getAdvertsNb()
    {
        return $this->advertsNb;
    }

    /**
     * Add advert
     *
     * @param \A2C\PlatformBundle\Entity\Advert $advert
     *
     * @return User
     */
    public function addAdvert(\A2C\PlatformBundle\Entity\Advert $advert)
    {
        $this->adverts[] = $advert;
        $this->advertsNb += 1;
        return $this;
    }

    /**
     * Remove advert
     *
     * @param \A2C\PlatformBundle\Entity\Advert $advert
     */
    public function removeAdvert(\A2C\PlatformBundle\Entity\Advert $advert)
    {
        $this->adverts->removeElement($advert);
        $this->advertsNb -= 1;
    }

    /**
     * Get adverts
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAdverts()
    {
        return $this->adverts;
    }
}
